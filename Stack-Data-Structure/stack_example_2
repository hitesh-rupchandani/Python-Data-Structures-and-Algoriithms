
from typing import Any

class Stack:
    """
        This stack class
    """

    def __init__(self) -> None:
        """
            Initialize internal list
        """
        self.__items = []

    def is_empty(self) -> bool:
        """
            Returns whether the stack is empty - Time Complexity: O(1)
        """
        return not self.__items
    
    def push(self, item: Any) -> None:
        """
            Inserts the element item at the top of the stack - Time Complexity: O(1)
        """
        self.__items.append(item)

    def pop(self) -> None:
        """
            Deletes the topmost element of the stack - Time Complexity: O(1)
        """
        if not self.__items:
            raise Exception("pop() called on empty stack.")
        
        return self.__items.pop()

    def peek(self) -> Any:
        """"
            Returns a reference to the topmost element of the stack - Time Complexity: O(1)
        """
        if not self.__items:
            raise Exception("peek() called on empty stack.")
        
        return self.__items[-1]
    
    def size(self) -> int:
        """
            Returns the size of the stack - Time Complexity: O(1)
        """
        return len(self.__items)
    
    def __str__(self) -> str:
        """
            Return contents of stack
        """
        return str(self.__items)
    

if __name__ == "__main__":
    # stack Object
    stack = Stack()

    # Print stack object
    print(stack)

    # Check that stack is empty or not
    print(stack.is_empty())

    # Add items in stack
    stack.push(10)
    stack.push(20)
    stack.push(30)

    # Print stack
    print(stack)

    # Pop last item from stack
    print(stack.pop())

    # Print stack again and check last item is removed or not
    print(stack)

    # Print last item of stack using peek
    print(stack.peek())

    # Print length of stack
    print(stack.size())

    # Print again full stack
    print(stack)

